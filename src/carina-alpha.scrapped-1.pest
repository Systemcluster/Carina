eol        = _{ ("\n" | eoi) }
whitespace = _{ (" " | "\t") }
break_eval  =  { "'" }

digit = _{ '0'..'9' }
plus  =  { "+" }
minus =  { "-" }
int   = ${ (plus|minus)? ~ digit ~ (digit | "_")* }
float = ${ int ~ "." ~ int? ~ exp? | int ~ exp }
exp   = ${ ^"e" ~ (plus|minus)? ~ int }

string_line       = { "\"\"" ~ (!(eol) ~ any)* ~ eol }
string_inline_raw = { (!("\\" | "\"") ~ any)+ }
string_escape     = { "\\" ~ any }
string_inline     = { "\"" ~ (string_inline_raw | string_escape)* ~ "\"" }
string            = { (string_line | string_inline) }

ident_char  = _{ 'a'..'z' | 'A'..'Z' | '0'..'9' | "_" }
ident       = ${ ('a'..'z' | 'A'..'Z' | "_") ~ (!(ident_char) | (ident_char ~ ident_char+)) }

decl_var    = { ":" } 
decl_const  = { "::" }

return_infer      = { "=>" }
return_specify    = { "->" }

function_arg      = _{ ident ~ (decl_var ~ (fundamental | (ident ~ break_eval?)))? }
function_ret      = _{ ("(" ~ (fundamental|ident)* ~ ")" ) | fundamental | (ident ~ break_eval?) }
function_arg_list = _{ function_arg* }
function_ret_list = _{ function_ret* }
function          = !{ "fn" ~ function_arg_list ~ (( return_infer ~ (break_eval|statement|block_start)) | ( return_specify ~ function_ret_list ~ (break_eval|block_start))) }
fundamental       = !{ (function) }

declaration = { 
	ident ~ ("::" | ":") 
}
application = {
	"sahfoahiifo"
}

statement     =  { declaration | application }
block_start   =  { "{" }
block_end     =  { "}" }
block         = _{ block_start ~ statement* ~ block_end }
