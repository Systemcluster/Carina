use std::fmt::Display;
use std::error::Error;
use std::iter::Iterator;
use std::collections::*;

use derive_more::*;
use itertools::*;
use unicode_reader::Graphemes;
use unicode_segmentation::UnicodeSegmentation;


mod result;
use result::*;




type Token<'a> = &'a str;
type Input<'a> = &'a [Token<'a>];
type InputContext = usize;
type ParseResult<Result> = Option<Result>;


fn advance(input: &mut Input, by: usize)
{
	*input = &input[by..];
}



fn is_special(token: Token) -> bool
{
	[	" ", "#", ":", ".", ",",  "[", "]", "{", "}",
		"(", ")", "/", "\\", "\"", "\n", "\r\n", "\t"
	].contains(&token)
}
fn is_invalid(token: Token) -> bool {
	for i in 0x00..0x1F {
		if i != 0x09 && i != 0x0A && i != 0x0D // allow \t, \n, \r
		&& std::str::from_utf8(&[i]) == Ok(token) {
			return true;
		}
	}
	false
}



fn map<A, R>(parser: impl Fn(&mut Input) -> ParseResult<A>, map_fn: impl Fn(A) -> R) -> impl Fn(&mut Input) -> ParseResult<R>
{
    move |input| parser(input).map(|result| map_fn(result))
}

fn discard<A>(parser: impl Fn(&mut Input) -> ParseResult<A>) -> impl Fn(&mut Input) -> ParseResult<()>
{
	move |input| parser(input).map(|result|())
}

fn any<'a, R>(of: &'a [impl Fn(&mut Input) -> ParseResult<R>]) -> impl Fn(&mut Input) -> ParseResult<R> + 'a {
	move |input| {
		for option in of {
			let result = option(input);
			match result {
				Some(_) => return result,
				_ => continue
			}
		}
		None
	}
}

fn zero_or_more<R>(parser: impl Fn(&mut Input) -> ParseResult<R>) -> impl Fn(&mut Input) -> ParseResult<Vec<R>>
{
	move |input| {
		let mut result = Vec::new();
		while let Some(next) = parser(input) {
			result.push(next);
		}
		Some(result)
	}
}
fn one_or_more<R>(parser: impl Fn(&mut Input) -> ParseResult<R>) -> impl Fn(&mut Input) -> ParseResult<Vec<R>>
{
	move |input| {
		let mut result = Vec::new();
		while let Some(next) = parser(input) {
			result.push(next);
		}
		if result.is_empty() {
			return None;
		}
		Some(result)
	}
}
fn optional<R>(parser: impl Fn(&mut Input) -> ParseResult<R>) -> impl Fn(&mut Input) -> ParseResult<Option<R>>
{
	move |input| Some(parser(input))
}


fn pair<RL, RR>(parserl: impl Fn(&mut Input) -> ParseResult<RL>, parserr: impl Fn(&mut Input) -> ParseResult<RR>) -> impl Fn(&mut Input) -> ParseResult<(RL, RR)>
{
	move |input| {
		#[allow(clippy::clone_double_ref)]
		let input_copy = &mut input.clone();
		if let Some(resultl) = parserl(input_copy) {
			if let Some(resultr) = parserr(input_copy) {
				*input = *input_copy;
				Some((resultl, resultr))
			} else { None }
		} else { None }
	}
}
fn left<RL, RR>(parserl: impl Fn(&mut Input) -> ParseResult<RL>, parserr: impl Fn(&mut Input) -> ParseResult<RR>) -> impl Fn(&mut Input) -> ParseResult<RL>
{
	map(pair(parserl, parserr), |(resultl, resultr)|resultl)
}
fn right<RL, RR>(parserl: impl Fn(&mut Input) -> ParseResult<RL>, parserr: impl Fn(&mut Input) -> ParseResult<RR>) -> impl Fn(&mut Input) -> ParseResult<RR>
{
	map(pair(parserl, parserr), |(resultl, resultr)|resultr)
}



fn literal(expected: &'static str) -> impl Fn(&mut Input) -> ParseResult<bool> {
	move |input| {
		let len = expected.graphemes(true).count();
		let next = input.iter().take(len).join("");
		println!("â†¶ matching {:?} with {:?}", next, expected);
		if next == expected {
			advance(input, len);
			Some(true)
		}
		else {
			None
		}
	}
}

fn newline(input: &mut Input) -> ParseResult<()> {
	discard(any(&[
		literal("\r\n"),
		literal("\n"),
		literal("\r"),
	]))(input)
}

fn space(input: &mut Input) -> ParseResult<()> {
	discard(literal(" "))(input)
}

fn identifier(input: &mut Input) -> ParseResult<String> {
	let iter = input.iter();
	let mut id = String::new();
	for next in iter {
		if is_invalid(next) {
			break;
		}
		if is_special(next) {
			break;
		}
		id.push_str(next);
	}
	if id.is_empty() {
		return None;
	}
	advance(input, id.len());
	Some(id)
}



pub fn main(input: std::path::PathBuf) -> Result<SuccessInfo, RuntimeError> {
	let name = input.file_stem()?.to_owned().to_str()?;
	let source = std::fs::read_to_string(input)?;
	let source = source.as_str().graphemes(true).collect::<Vec<_>>();
	let iter = &mut &source[..];

	// println!("{:?}", pair(literal("f"), literal("function"))(iter));
	// println!("{:?}", pair(literal("f"), literal("unction"))(iter));
	// println!("{:?}", literal("no")(iter));
	// println!("{:?}", zero_or_more(literal("no"))(iter));
	// println!("{:?}", discard(one_or_more(space))(iter));
	// println!("{:?}", literal("calls")(iter));
	let spaced_identifier = left(identifier, zero_or_more(space));
	let expression = pair(one_or_more(spaced_identifier), optional(newline));

	println!("{:?}", expression(iter));
	println!("{:?}", one_or_more(map(newline, |i|"<newline>"))(iter));
	println!("{:?}", identifier(iter));

	Ok(SuccessInfo{message: String::from("Success!")})
}
